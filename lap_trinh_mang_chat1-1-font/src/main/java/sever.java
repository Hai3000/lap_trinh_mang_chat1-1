import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author hailo
 */
public class sever extends javax.swing.JFrame {

    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(sever.class.getName());
    public static List<PrintWriter> clientWriters = new ArrayList<>();


    /**
     * Creates new form sever
     */
    public sever() {
        initComponents();
        setLocationRelativeTo(null);

    docLogTuFile(); // 🔹 Khi mở lại server, hiển thị lại toàn bộ log cũ
    
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        hienthilog = new javax.swing.JTextArea();
        startsever = new javax.swing.JButton();
        Stopsever = new javax.swing.JButton();
        nhapport = new javax.swing.JTextField();
        tinnhan = new javax.swing.JLabel();
        port = new javax.swing.JLabel();
        btnthoat = new javax.swing.JButton();
        anhnen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hienthilog.setColumns(20);
        hienthilog.setRows(5);
        jScrollPane2.setViewportView(hienthilog);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 600, 300));

        startsever.setForeground(new java.awt.Color(51, 51, 255));
        startsever.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8-off-32.png"))); // NOI18N
        startsever.setText("mở");
        startsever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startseverActionPerformed(evt);
            }
        });
        getContentPane().add(startsever, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 40, 110, 20));

        Stopsever.setForeground(new java.awt.Color(51, 51, 255));
        Stopsever.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8-off-24-2.png"))); // NOI18N
        Stopsever.setText("đóng");
        Stopsever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopseverActionPerformed(evt);
            }
        });
        getContentPane().add(Stopsever, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 70, 110, 20));

        nhapport.setText("Nhập port để lắng nghe");
        getContentPane().add(nhapport, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 300, -1));

        tinnhan.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        tinnhan.setForeground(new java.awt.Color(255, 255, 255));
        tinnhan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8-talk-48.png"))); // NOI18N
        tinnhan.setText("Disscord mess");
        getContentPane().add(tinnhan, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 260, 50));

        port.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        port.setForeground(new java.awt.Color(255, 255, 255));
        port.setText("Port");
        getContentPane().add(port, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        btnthoat.setForeground(new java.awt.Color(255, 0, 51));
        btnthoat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8-no-50.png"))); // NOI18N
        btnthoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthoatActionPerformed(evt);
            }
        });
        getContentPane().add(btnthoat, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 0, 30, 30));

        anhnen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/background.png"))); // NOI18N
        getContentPane().add(anhnen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 422));

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void ghiLogVaoFile(String noiDung) {
    try (BufferedWriter bw = new BufferedWriter(new FileWriter("server_log.txt", true))) {
        bw.write(noiDung);
        bw.newLine();
    } catch (IOException e) {
        System.err.println("Không thể ghi log: " + e.getMessage());
    }
}

// Đọc toàn bộ file log.txt và hiển thị vào hienthilog
private void docLogTuFile() {
    File file = new File("server_log.txt");
    if (!file.exists()) return; // Nếu chưa có log thì bỏ qua

    try (BufferedReader br = new BufferedReader(new FileReader(file))) {
        String line;
        while ((line = br.readLine()) != null) {
            hienthilog.append(line + "\n");
        }
    } catch (IOException e) {
        System.err.println("Lỗi khi đọc log: " + e.getMessage());
    }
}

    private void startseverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startseverActionPerformed
        // TODO add your handling code here:
                try {
        int port = Integer.parseInt(nhapport.getText().trim());
        serverSocket = new ServerSocket(port);
        hienthilog.append("✅ Server đã bật, lắng nghe cổng: " + port + "\n");
        ghiLogVaoFile("✅ Server đã bật, lắng nghe cổng: " + port);

        // Chạy server trong thread riêng
        serverThread = new Thread(() -> {
    try {
        while (true) {
            Socket socket = serverSocket.accept();
            hienthilog.append("🔗 Client mới kết nối!\n");
            new Thread(new clientHandler(socket)).start();
        }
    } catch (IOException ex) {
        hienthilog.append("⚠ Lỗi: " + ex.getMessage() + "\n");
    }
});
serverThread.start();

    } catch (   IOException | NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi khi bật server: " + ex.getMessage());
    }
                
    }//GEN-LAST:event_startseverActionPerformed

    private void StopseverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopseverActionPerformed
        // TODO add your handling code here:
         try {
        if (clientSocket != null && !clientSocket.isClosed()) {
            clientSocket.close();
        }
        if (serverSocket != null && !serverSocket.isClosed()) {
            serverSocket.close();
        }
        hienthilog.append("🛑 Server đã dừng.\n");
    } catch (IOException ex) {
        hienthilog.append("⚠ Lỗi khi dừng server: " + ex.getMessage() + "\n");
    }
         
    }//GEN-LAST:event_StopseverActionPerformed

    private void btnthoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthoatActionPerformed
        // TODO add your handling code here:
          this.dispose();
    }//GEN-LAST:event_btnthoatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new sever().setVisible(true));
    }
private ServerSocket serverSocket;
private Socket clientSocket;
private BufferedReader reader;
private PrintWriter writer;
private Thread serverThread;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Stopsever;
    private javax.swing.JLabel anhnen;
    private javax.swing.JButton btnthoat;
    private javax.swing.JTextArea hienthilog;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nhapport;
    private javax.swing.JLabel port;
    private javax.swing.JButton startsever;
    private javax.swing.JLabel tinnhan;
    // End of variables declaration//GEN-END:variables

    class clientHandler implements Runnable {

 private Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;
     private Object hienthinlog;

     
     private void ghiTinNhanVaoFile(String msg) {
    try (FileWriter fw = new FileWriter("server_log.txt", true);
         BufferedWriter bw = new BufferedWriter(fw);
         PrintWriter out = new PrintWriter(bw)) {
        out.println(msg);
    } catch (IOException e) {
        hienthilog.append("⚠ Lỗi khi ghi tin nhắn vào file: " + e.getMessage() + "\n");
    }
}

     
    public clientHandler(Socket socket) throws IOException {
        this.socket = socket;
        reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        writer = new PrintWriter(socket.getOutputStream(), true);
        sever.clientWriters.add(writer);
    }

    @Override
public void run() {
    try {
        String msg;
        while ((msg = reader.readLine()) != null) {
            
              ghiTinNhanVaoFile(msg); // ✅ Ghi tin nhắn chat vào file
            // 🔹 Gửi tin cho tất cả client KHÁC (bỏ qua người gửi)
            synchronized (sever.clientWriters) {
                for (PrintWriter w : sever.clientWriters) {
                    if (w != writer) {  // ❗ Bỏ qua chính người gửi
                        w.println(msg);
                    }
                }
            }

            // 🔹 Ghi log lên giao diện server
            String finalMsg = msg;
            javax.swing.SwingUtilities.invokeLater(() -> {
                hienthilog.append("\n" + finalMsg + " -> ");
            });
        }
    } catch (IOException e) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            hienthilog.append("⚠ Client ngắt kết nối.\n");
        });
    } finally {
        // 🔹 Xóa writer khỏi danh sách khi client ngắt kết nối
        synchronized (sever.clientWriters) {
            sever.clientWriters.remove(writer);
        }

        try {
            socket.close();
        } catch (IOException ignored) {}
    }

}
    }
}
